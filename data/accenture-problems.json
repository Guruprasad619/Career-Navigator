[
     {
        "problemId": 1,
        "courseId": "Accenture",
        "title": "Find Count with Difference",
        "difficulty": "Easy",
        "description": "You are given a function, int findCount(int arr[], int length, int num, int diff);\n\nThe function accepts an integer array ‘arr’, its length and two integer variables ‘num’ and ‘diff’. Implement this function to find and return the number of elements of ‘arr’ having an absolute difference of less than or equal to ‘diff’ with ‘num’.\nNote: In case there is no element in ‘arr’ whose absolute difference with ‘num’ is less than or equal to ‘diff’, return -1.",
        "examples": [
          {
            "input": "arr: 12 3 14 56 77 13\nnum: 13\ndiff: 2\n",
            "output": "3\n",
            "explanation": "Elements of ‘arr’ having absolute difference of less than or equal to ‘diff’ i.e. 2 with ‘num’ i.e. 13 are 12, 13 and 14."
          }
        ],
        "constraints": [
          "1 <= length <= 100",
          "-1000 <= arr[i] <= 1000",
          "-1000 <= num <= 1000",
          "0 <= diff <= 1000"
        ],
        "testCases": [
          {
            "input": "arr: 12 3 14 56 77 13\nnum: 13\ndiff: 2\n",
            "expectedOutput": "3\n"
          },
          {
            "input": "arr: 1 2 3 4 5\nnum: 3\ndiff: 0\n",
            "expectedOutput": "1\n"
          },
          {
            "input": "arr: 1 2 3 4 5\nnum: 10\ndiff: 2\n",
            "expectedOutput": "-1\n"
          },
          {
            "input": "arr: -1 -2 -3 -4 -5\nnum: -3\ndiff: 1\n",
            "expectedOutput": "3\n"
          },
          {
            "input": "arr: 10 20 30 40 50\nnum: 25\ndiff: 5\n",
            "expectedOutput": "2\n"
          },
          {
            "input": "arr: 10 10 10 10 10\nnum: 10\ndiff: 0\n",
            "expectedOutput": "5\n"
          }
      
        ],
        "hints": [
          "Iterate through the array and calculate the absolute difference between each element and the given number.",
          "If the absolute difference is less than or equal to the given difference, increment a counter.",
          "If the counter is zero after iterating through the array, return -1.",
          "Otherwise, return the counter."
        ],
        "tags": ["Array", "Math", "Iteration"]
      },
       {
        "problemId": 2,
        "courseId": "Accenture",
        "title": "Rearrange String",
        "difficulty": "Easy",
        "description": "You are given two strings, s and t. Your task is to determine if it's possible to rearrange the characters of s to form the string t. Write a function that returns True if it's possible to create t by rearranging the characters of s and False otherwise.",
        "examples": [
          {
            "input": "s=\"listen\"\nt=\"silent\"\n",
            "output": "True\n"
          },
          {
            "input": "s=\"abc\"\nt=\"cab\"\n",
            "output": "True\n"
          },
          {
            "input": "s=\"abc\"\nt=\"abd\"\n",
            "output": "False\n"
          },
          {
            "input": "s=\"aabb\"\nt=\"abab\"\n",
            "output": "True\n"
          },
          {
            "input": "s=\"aab\"\nt=\"abb\"\n",
            "output": "False\n"
          }
        ],
        "constraints": [
          "1 <= length of s <= 1000",
          "1 <= length of t <= 1000",
          "s and t consist of lowercase English letters."
        ],
        "testCases": [
          {
            "input": "s=\"listen\"\nt=\"silent\"\n",
            "expectedOutput": "True\n"
          },
          {
            "input": "s=\"abc\"\nt=\"abd\"\n",
            "expectedOutput": "False\n"
          },
          {
            "input": "s=\"abc\"\nt=\"cab\"\n",
            "expectedOutput": "True\n"
          },
          {
             "input": "s=\"aab\"\nt=\"abb\"\n",
             "expectedOutput": "False\n"
          },
          {
            "input": "s=\"aabb\"\nt=\"abab\"\n",
            "expectedOutput": "True\n"
          },
          {
            "input": "s=\"\", t=\"\"\n",
            "expectedOutput": "True\n"
          }
        ],
        "hints": [
          "Check if the lengths of the two strings are equal. If they are not, return False.",
          "Count the frequency of each character in both strings.",
          "Compare the frequency counts. If they are the same for all characters, return True. Otherwise, return False."
        ],
        "tags": ["String", "Hash Table", "Counting"]
      },
      {
        "problemId": 3,
        "courseId": "Accenture",
        "title": "Autobiographical Number",
        "difficulty": "Medium",
        "description": "An Autobiographical Number is a number N such that the first digit of N represents the count of how many zeroes are there in N, the second digit represents the count of how many ones are there in N and so on.\n\nYou are given a function, def FindAutoCount(n):\n\nThe function accepts string “n” which is a number and checks whether the number is an autobiographical number or not. If it is, an integer is returned, i.e. the count of distinct numbers in ‘n’. If not, it returns 0.\n\nAssumption:\n\nThe input string will not be longer than 10 characters.\nInput string will consist of numeric characters.\nNote:\n\nIf string is None return 0.",
        "examples": [
          {
            "input": "n: “1210”\n",
            "output": "3\n",
            "explanation": "0th position in the input contains the number of 0 present in input, i.e. 1, in 1st position the count of number of 1s in input i.e. 2, in 2nd position the count of 2s in input i.e. 1, and in 3rd position the count of 3s i.e. 0, so the number is an autobiographical number.\n\nNow unique numbers in the input are 0, 1, 2, so the count of unique numbers is 3. So 3 is returned."
          },
          {
            "input": "n: \"2020\"\n",
            "output": "2\n"
          },
          {
            "input": "n: \"123\"\n",
            "output": "0\n"
          },
          {
            "input": "n: \"0\"\n",
            "output": "1\n"
          },
          {
              "input": "n: \"21200\"\n",
              "output": "3\n"
          }
      
        ],
        "constraints": [
          "0 <= length of n <= 10",
          "n consists of numeric characters (0-9)."
        ],
        "testCases": [
          {
            "input": "n: “1210”\n",
            "expectedOutput": "3\n"
          },
          {
            "input": "n: \"2020\"\n",
            "expectedOutput": "2\n"
          },
          {
            "input": "n: \"123\"\n",
            "expectedOutput": "0\n"
          },
          {
            "input": "n: \"0\"\n",
            "expectedOutput": "1\n"
          },
          {
            "input": "n: \"21200\"\n",
            "expectedOutput": "3\n"
          },
          {
              "input": "n: \"\"\n",
              "expectedOutput": "0\n"
          },
          {
              "input": "n: null\n",
              "expectedOutput": "0\n"
          }
      
        ],
        "hints": [
          "Check if the input string is None or empty. If it is, return 0.",
          "Iterate through the input string and check if each digit represents the count of its index in the string.",
          "If any digit does not match its count, return 0.",
          "If all digits match their counts, count the unique digits in the string and return the count."
        ],
        "tags": ["String", "Math", "Counting"]
      }, {
        "problemId": 4,
        "courseId": "Accenture",
        "title": "Binary String Operations",
        "difficulty": "Medium",
        "description": "The Binary number system only uses two digits, 0 and 1 and number system can be called binary string. You are required to implement the following function:\n\nint OperationsBinaryString(char* str);\n\nThe function accepts a string str as its argument. The string str consists of binary digits separated with an alphabet as follows:\n\n– A denotes AND operation\n– B denotes OR operation\n– C denotes XOR Operation\nYou are required to calculate the result of the string str, scanning the string to right taking one operation at a time, and return the same.\n\nNote:\n\n– No order of priorities of operations is required\n– Length of str is odd\n– If str is NULL or None (in case of Python), return -1",
        "examples": [
          {
            "input": "str: 1C0C1C1A0B1\n",
            "output": "1\n",
            "explanation": "The alphabets in str when expanded becomes “1 XOR 0 XOR 1 XOR 1 AND 0 OR 1”, result of the expression becomes 1, hence 1 is returned."
          },
          {
            "input": "str: 0C1A1B1C1C1B0A0\n",
            "output": "0\n"
          },
          {
            "input": "str: 1A1B0C1\n",
            "output": "1\n"
          },
          {
            "input": "str: 0B1A0C1\n",
            "output": "1\n"
          },
          {
            "input": "str: 1C1C1C1\n",
            "output": "1\n"
          },
          {
            "input": "str: 0A1A1A1\n",
            "output": "0\n"
          }
      
        ],
        "constraints": [
          "1 <= length of str <= 100",
          "str consists of binary digits (0, 1) and operators (A, B, C).",
          "Length of str is odd.",
          "If str is NULL or None, return -1."
        ],
        "testCases": [
          {
            "input": "str: 1C0C1C1A0B1\n",
            "expectedOutput": "1\n"
          },
          {
            "input": "str: 0C1A1B1C1C1B0A0\n",
            "expectedOutput": "0\n"
          },
          {
            "input": "str: 1A1B0C1\n",
            "expectedOutput": "1\n"
          },
          {
            "input": "str: 0B1A0C1\n",
            "expectedOutput": "1\n"
          },
          {
            "input": "str: 1C1C1C1\n",
            "expectedOutput": "1\n"
          },
          {
            "input": "str: 0A1A1A1\n",
            "expectedOutput": "0\n"
          },
          {
              "input": "str: null\n",
              "expectedOutput": "-1\n"
          },
          {
               "input": "str: \"\"\n",
               "expectedOutput": "-1\n"
          }
        ],
        "hints": [
          "Check if the input string is NULL or empty. If it is, return -1.",
          "Iterate through the string from left to right, processing each operation.",
          "Maintain a running result and update it based on the current operation and operand.",
          "Handle each operation (A, B, C) separately.",
          "Remember that the input string will always have an odd length, alternating between digits and operators."
        ],
        "tags": ["String", "Bit Manipulation", "Simulation"]
      },
      {
        "problemId": 5,
        "courseId": "Accenture",
        "title": "Light Bulb Switches",
        "difficulty": "Medium",
        "description": "N light bulbs are connected by a wire. Each bulb has a switch associated with it, however due to faulty wiring, a switch also changes the state of all the bulbs to the right of current bulb. Given an initial state of all bulbs, Find the minimum number of switches you have to press to turn on all the bulbs. You can press the same switch multiple times.\n\nNote: 0 represents the bulb is off and 1 represents the bulb is on.",
        "examples": [
          {
            "input": "A[] = [0, 1, 0, 1]\n",
            "output": "4\n",
            "explanation": "Press switch 0: [1, 0, 1, 0] //1\nPress switch 1: [1, 1, 0, 1] //2\nPress switch 2: [1, 1, 1, 0] //3\nPress switch 3: [1, 1, 1, 1] //4"
          },
          {
            "input": "A[] = [1, 0, 0, 0, 0]\n",
            "output": "1\n"
          },
          {
              "input": "A[] = [1, 1, 1, 1, 1]\n",
              "output": "0\n"
          },
          {
              "input": "A[] = [0, 0, 0]\n",
              "output": "3\n"
          },
          {
              "input": "A[] = [0, 1, 1, 0]\n",
              "output": "2\n"
          },
          {
               "input": "A[] = [1,0,1,0,1,0]\n",
               "output": "3\n"
          }
        ],
        "constraints": [
          "1 <= N <= 1000",
          "A[i] is either 0 or 1."
        ],
        "testCases": [
          {
            "input": "A[] = [0, 1, 0, 1]\n",
            "expectedOutput": "4\n"
          },
          {
            "input": "A[] = [1, 0, 0, 0, 0]\n",
            "expectedOutput": "1\n"
          },
          {
              "input": "A[] = [1, 1, 1, 1, 1]\n",
              "expectedOutput": "0\n"
          },
          {
              "input": "A[] = [0, 0, 0]\n",
              "expectedOutput": "3\n"
          },
          {
              "input": "A[] = [0, 1, 1, 0]\n",
              "expectedOutput": "2\n"
          },
          {
               "input": "A[] = [1,0,1,0,1,0]\n",
               "expectedOutput": "3\n"
          },
          {
              "input": "A[] = []\n",
              "expectedOutput": "0\n"
          }
        ],
        "hints": [
          "Iterate through the array from left to right.",
          "If a bulb is off, press its switch and update the states of all the bulbs to the right.",
          "Keep track of the number of switches pressed.",
          "Return the total number of switches pressed."
        ],
        "tags": ["Array", "Greedy", "Simulation"]
      },
       {
        "problemId": 6,
        "courseId": "Accenture",
        "title": "Chocolate Distribution",
        "difficulty": "Medium",
        "description": "Given an array of N integers where each value represents the number of chocolates in a packet. Each packet can have a variable number of chocolates. There are m students, the task is to distribute chocolate packets such that:\n\nEach student gets one packet.\nThe difference between the number of chocolates in the packet with maximum chocolates and the packet with minimum chocolates given to the students is minimum.\n\nExamples:\n\nInput : arr[] = {7, 3, 2, 4, 9, 12, 56} , m = 3\nOutput: Minimum Difference is 2\nExplanation:\nWe have seven packets of chocolates and we need to pick three packets for 3 students\nIf we pick 2, 3 and 4, we get the minimum difference between maximum and minimum packet sizes.\n\nInput : arr[] = {3, 4, 1, 9, 56, 7, 9, 12} , m = 5\nOutput: Minimum Difference is 6\n\nInput : arr[] = {12, 4, 7, 9, 2, 23, 25, 41, 30, 40, 28, 42, 30, 44, 48, 43, 50} , m = 7\nOutput: Minimum Difference is 10",
        "examples": [
          {
            "input": "arr[] = {7, 3, 2, 4, 9, 12, 56} , m = 3\n",
            "output": "Minimum Difference is 2\n",
            "explanation": "We have seven packets of chocolates and we need to pick three packets for 3 students. If we pick 2, 3 and 4, we get the minimum difference between maximum and minimum packet sizes."
          },
          {
            "input": "arr[] = {3, 4, 1, 9, 56, 7, 9, 12} , m = 5\n",
            "output": "Minimum Difference is 6\n"
          },
          {
            "input": "arr[] = {12, 4, 7, 9, 2, 23, 25, 41, 30, 40, 28, 42, 30, 44, 48, 43, 50} , m = 7\n",
            "output": "Minimum Difference is 10\n"
          }
        ],
        "constraints": [
          "1 <= N <= 1000",
          "1 <= m <= N",
          "1 <= arr[i] <= 10^5"
        ],
        "testCases": [
          {
            "input": "arr[] = {7, 3, 2, 4, 9, 12, 56} , m = 3\n",
            "expectedOutput": "Minimum Difference is 2\n"
          },
          {
            "input": "arr[] = {3, 4, 1, 9, 56, 7, 9, 12} , m = 5\n",
            "expectedOutput": "Minimum Difference is 6\n"
          },
          {
            "input": "arr[] = {12, 4, 7, 9, 2, 23, 25, 41, 30, 40, 28, 42, 30, 44, 48, 43, 50} , m = 7\n",
            "expectedOutput": "Minimum Difference is 10\n"
          },
          {
            "input": "arr[] = {1,2,3,4,5,6,7,8,9,10} , m = 5\n",
            "expectedOutput": "Minimum Difference is 4\n"
          },
          {
            "input": "arr[] = {10,12,14,16,18,20} , m = 3\n",
            "expectedOutput": "Minimum Difference is 4\n"
          },
          {
              "input": "arr[] = {100,200,300,400,500} , m = 2\n",
              "expectedOutput": "Minimum Difference is 100\n"
          },
          {
              "input": "arr[] = {100,200,300,400,500} , m = 1\n",
              "expectedOutput": "Minimum Difference is 400\n"
          }
        ],
        "hints": [
          "Sort the array in ascending order.",
          "Iterate through the array and find the subarray of size m with the minimum difference between the maximum and minimum elements.",
          "Keep track of the minimum difference found so far.",
          "Return the minimum difference."
        ],
        "tags": ["Array", "Sorting", "Sliding Window"]
      },
      {
        "problemId": 7,
        "courseId": "Accenture",
        "title": "Number of Carries",
        "difficulty": "Medium",
        "description": "A carry is a digit that is transferred to left if sum of digits exceeds 9 while adding two numbers from right-to-left one digit at a time.\n\nYou are required to implement the following function.\n\nInt NumberOfCarries(int num1 , int num2);\n\nThe functions accepts two numbers ‘num1’ and ‘num2’ as its arguments. You are required to calculate and return the total number of carries generated while adding digits of two numbers ‘num1’ and ‘num2’.\n\nAssumption: num1, num2>=0",
        "examples": [
          {
            "input": "Num 1: 451\nNum 2: 349\n",
            "output": "2\n",
            "explanation": "Adding ‘num 1’ and ‘num 2’ right-to-left results in 2 carries since ( 1+9) is 10. 1 is carried and (5+4=1) is 10, again 1 is carried. Hence 2 is returned."
          },
          {
            "input": "Num 1: 23\nNum 2: 563\n",
            "output": "0\n"
          }
        ],
        "constraints": [
          "0 <= num1 <= 10^9",
          "0 <= num2 <= 10^9"
        ],
        "testCases": [
          {
            "input": "Num 1: 451\nNum 2: 349\n",
            "expectedOutput": "2\n"
          },
          {
            "input": "Num 1: 23\nNum 2: 563\n",
            "expectedOutput": "0\n"
          },
          {
            "input": "Num 1: 999\nNum 2: 1\n",
            "expectedOutput": "3\n"
          },
          {
            "input": "Num 1: 1\nNum 2: 999\n",
            "expectedOutput": "3\n"
          },
          {
            "input": "Num 1: 1234\nNum 2: 5678\n",
            "expectedOutput": "1\n"
          },
          {
            "input": "Num 1: 0\nNum 2: 0\n",
            "expectedOutput": "0\n"
          },
          {
            "input": "Num 1: 10\nNum 2: 90\n",
            "expectedOutput": "1\n"
          }
        ],
        "hints": [
          "Iterate through the digits of the two numbers from right to left.",
          "Add the digits and check if the sum is greater than 9.",
          "If the sum is greater than 9, increment a carry counter and set the carry to 1.",
          "Otherwise, set the carry to 0.",
          "Continue iterating until both numbers have been processed.",
          "Return the carry counter."
        ],
        "tags": ["Math", "Simulation"]
      },
      {
        "problemId": 8,
        "courseId": "Accenture",
        "title": "Intermediate Palindrome Numbers",
        "difficulty": "Easy",
        "description": "Write a program in C such that it takes a lower limit and upper limit as inputs and print all the intermediate palindrome numbers.",
        "examples": [
          {
            "input": "10, 80\n",
            "output": "11, 22, 33, 44, 55, 66, 77\n"
          },
          {
            "input": "100, 200\n",
            "output": "101, 111, 121, 131, 141, 151, 161, 171, 181, 191\n"
          }
        ],
        "constraints": [
          "1 <= lower_limit <= upper_limit <= 100000"
        ],
        "testCases": [
          {
            "input": "10, 80\n",
            "expectedOutput": "11, 22, 33, 44, 55, 66, 77\n"
          },
          {
            "input": "100, 200\n",
            "expectedOutput": "101, 111, 121, 131, 141, 151, 161, 171, 181, 191\n"
          },
          {
            "input": "1, 10\n",
            "expectedOutput": "1, 2, 3, 4, 5, 6, 7, 8, 9\n"
          },
          {
            "input": "900, 1000\n",
            "expectedOutput": "909, 919, 929, 939, 949, 959, 969, 979, 989, 999\n"
          },
          {
            "input": "10, 11\n",
            "expectedOutput": "11\n"
          },
          {
            "input": "11, 11\n",
            "expectedOutput": "11\n"
          },
          {
            "input": "10000, 10010\n",
            "expectedOutput": "10001\n"
          }
        ],
        "hints": [
          "Iterate through the range of numbers from the lower limit to the upper limit.",
          "For each number, check if it is a palindrome.",
          "To check if a number is a palindrome, reverse the number and compare it with the original number.",
          "If a number is a palindrome, print it.",
          "Handle the case when lower limit and upper limit are equal."
        ],
        "tags": ["Math", "Iteration", "String", "Palindrome"]
      },
      {
        "problemId": 9,
        "courseId": "Accenture",
        "title": "Sum of Distances Between Three Points",
        "difficulty": "Easy",
        "description": "The program is supposed to calculate the sum of distance between three points from each other.\n\nFor\nx1 = 1 y1 = 1\nx2 = 2 y2 = 4\nx3 = 3 y3 = 6\n\nDistance is calculated as : sqrt((x2-x1)^2 + (y2-y1)^2)",
        "examples": [
          {
            "input": "x1 = 1, y1 = 1\nx2 = 2, y2 = 4\nx3 = 3, y3 = 6\n",
            "output": "7.0710678118654755\n",
            "explanation": "Distance (1,1) to (2,4) = sqrt((2-1)^2 + (4-1)^2) = sqrt(10)\nDistance (1,1) to (3,6) = sqrt((3-1)^2 + (6-1)^2) = sqrt(29)\nDistance (2,4) to (3,6) = sqrt((3-2)^2 + (6-4)^2) = sqrt(5)\nSum = sqrt(10) + sqrt(29) + sqrt(5) ~ 7.0710678118654755"
          },
           {
            "input": "x1 = 0, y1 = 0\nx2 = 3, y2 = 4\nx3 = 0, y3 = 5\n",
            "output": "13.0\n",
            "explanation": "Distance (0,0) to (3,4) = sqrt((3-0)^2 + (4-0)^2) = sqrt(25) = 5\nDistance (0,0) to (0,5) = sqrt((0-0)^2 + (5-0)^2) = sqrt(25) = 5\nDistance (3,4) to (0,5) = sqrt((0-3)^2 + (5-4)^2) = sqrt(10)\nSum = 5 + 5 + sqrt(10) ~ 13.0"
          },
           {
            "input": "x1 = 10, y1 = 20\nx2 = 15, y2 = 25\nx3 = 20, y3 = 30\n",
            "output": "14.142135623730951\n"
          }
      
        ],
        "constraints": [
          "-1000 <= x1, y1, x2, y2, x3, y3 <= 1000"
        ],
        "testCases": [
          {
            "input": "x1 = 1, y1 = 1\nx2 = 2, y2 = 4\nx3 = 3, y3 = 6\n",
            "expectedOutput": "7.0710678118654755\n"
          },
          {
            "input": "x1 = 0, y1 = 0\nx2 = 3, y2 = 4\nx3 = 0, y3 = 5\n",
            "expectedOutput": "13.0\n"
          },
          {
            "input": "x1 = 10, y1 = 20\nx2 = 15, y2 = 25\nx3 = 20, y3 = 30\n",
            "expectedOutput": "14.142135623730951\n"
          },
          {
            "input": "x1 = 0, y1 = 0\nx2 = 0, y2 = 0\nx3 = 0, y3 = 0\n",
            "expectedOutput": "0.0\n"
          },
          {
            "input": "x1 = -1, y1 = -1\nx2 = 1, y2 = 1\nx3 = 3, y3 = 3\n",
            "expectedOutput": "11.313708498984761\n"
          },
          {
            "input": "x1 = 1, y1 = 1\nx2 = 1, y2 = 1\nx3 = 2, y3 = 2\n",
            "expectedOutput": "2.8284271247461903\n"
          }
        ],
        "hints": [
          "Calculate the distance between each pair of points using the distance formula: sqrt((x2-x1)^2 + (y2-y1)^2).",
          "Sum the three distances.",
          "Return the sum."
        ],
        "tags": ["Math", "Geometry"]
      },
       {
        "problemId": 10,
        "courseId": "Accenture",
        "title": "Element Occurrences",
        "difficulty": "Easy",
        "description": "Given an array, find the number of occurrences of each element in the array.",
        "examples": [
          {
            "input": "arr[] = {10, 5, 10, 15, 10, 5}\n",
            "output": "10 - 3\n5 - 2\n15 - 1\n"
          },
          {
            "input": "arr[] = {1, 2, 3, 4, 5}\n",
            "output": "1 - 1\n2 - 1\n3 - 1\n4 - 1\n5 - 1\n"
          },
          {
            "input": "arr[] = {1, 1, 1, 1, 1}\n",
            "output": "1 - 5\n"
          },
          {
            "input": "arr[] = {10, 20, 10, 20, 30, 40, 30, 50}\n",
            "output": "10 - 2\n20 - 2\n30 - 2\n40 - 1\n50 - 1\n"
          },
          {
            "input": "arr[] = {}\n",
            "output": "\n"
          }
      
        ],
        "constraints": [
          "0 <= length of arr <= 1000",
          "-1000 <= arr[i] <= 1000"
        ],
        "testCases": [
          {
            "input": "arr[] = {10, 5, 10, 15, 10, 5}\n",
            "expectedOutput": "10 - 3\n5 - 2\n15 - 1\n"
          },
          {
            "input": "arr[] = {1, 2, 3, 4, 5}\n",
            "expectedOutput": "1 - 1\n2 - 1\n3 - 1\n4 - 1\n5 - 1\n"
          },
          {
            "input": "arr[] = {1, 1, 1, 1, 1}\n",
            "expectedOutput": "1 - 5\n"
          },
          {
            "input": "arr[] = {10, 20, 10, 20, 30, 40, 30, 50}\n",
            "expectedOutput": "10 - 2\n20 - 2\n30 - 2\n40 - 1\n50 - 1\n"
          },
          {
            "input": "arr[] = {}\n",
            "expectedOutput": "\n"
          }
        ],
        "hints": [
          "Use a hash map (dictionary) to store the occurrences of each element.",
          "Iterate through the array and update the counts in the hash map.",
          "Print the elements and their counts from the hash map."
        ],
        "tags": ["Array", "Hash Table", "Counting"]
      },
      {
        "problemId": 11,
        "courseId": "Accenture",
        "title": "Encode the Number",
        "difficulty": "Easy",
        "description": "Encode the Number:\nYou work in the message encoding department of a national security message agency. Every message that is sent from or received in your office is encoded. You have an integer N and each digit of N is squared and the squares are concatenated together to encode the original number. Your task is to find and return an integer value representing the encoded value of the number.\n\nInput Specification:\ninput1: An integer value N representing the number to be encoded.\n\nExplanation:\nOutput Specification:\nReturn an integer value representing the encoded value of the number.",
        "examples": [
          {
            "input": "input1: 34\n",
            "output": "916\n",
            "explanation": "Here, the given integer is 34, and the square its digit are:\n3^2= 9\n4²=16"
          },
          {
            "input": "input1: 123\n",
            "output": "149\n"
          },
          {
            "input": "input1: 0\n",
            "output": "0\n"
          },
          {
            "input": "input1: 9\n",
            "output": "81\n"
          },
          {
            "input": "input1: 10\n",
            "output": "10\n"
          },
          {
             "input": "input1: 111\n",
             "output": "111\n"
          }
        ],
        "constraints": [
          "0 <= N <= 10^9"
        ],
        "testCases": [
          {
            "input": "input1: 34\n",
            "expectedOutput": "916\n"
          },
          {
            "input": "input1: 123\n",
            "expectedOutput": "149\n"
          },
          {
            "input": "input1: 0\n",
            "expectedOutput": "0\n"
          },
          {
            "input": "input1: 9\n",
            "expectedOutput": "81\n"
          },
          {
            "input": "input1: 10\n",
            "expectedOutput": "10\n"
          },
          {
             "input": "input1: 111\n",
             "expectedOutput": "111\n"
          }
        ],
        "hints": [
          "Convert the integer to a string.",
          "Iterate through the string, convert each digit to an integer, and square it.",
          "Concatenate the squared digits (as strings) to form the encoded string.",
          "Convert the encoded string back to an integer and return it."
        ],
        "tags": ["Math", "String", "Simulation"]
      },
       {
        "problemId": 12,
        "courseId": "Accenture",
        "title": "Sum of Digits is Prime",
        "difficulty": "Easy",
        "description": "A number whose sum of digits is prime.",
        "examples": [
          {
            "input": "43\n",
            "output": "YES (4+3 = 7)\n"
          },
          {
            "input": "123\n",
            "output": "NO (1+2+3 = 6)\n"
          },
          {
            "input": "11\n",
            "output": "YES (1+1 = 2)\n"
          },
          {
            "input": "111\n",
            "output": "YES (1+1+1 = 3)\n"
          },
          {
              "input": "112\n",
              "output": "YES (1+1+2 = 4)\n"
          },
          {
              "input": "113\n",
              "output": "YES (1+1+3 = 5)\n"
          },
          {
              "input": "114\n",
              "output": "NO (1+1+4 = 6)\n"
          },
          {
              "input": "115\n",
              "output": "YES (1+1+5 = 7)\n"
          }
      
        ],
        "constraints": [
          "1 <= input number <= 10^9"
        ],
        "testCases": [
          {
            "input": "43\n",
            "expectedOutput": "YES (4+3 = 7)\n"
          },
          {
            "input": "123\n",
            "expectedOutput": "NO (1+2+3 = 6)\n"
          },
          {
            "input": "11\n",
            "expectedOutput": "YES (1+1 = 2)\n"
          },
          {
            "input": "111\n",
            "expectedOutput": "YES (1+1+1 = 3)\n"
          },
          {
              "input": "112\n",
              "expectedOutput": "YES (1+1+2 = 4)\n"
          },
          {
              "input": "113\n",
              "expectedOutput": "YES (1+1+3 = 5)\n"
          },
          {
              "input": "114\n",
              "expectedOutput": "NO (1+1+4 = 6)\n"
          },
          {
              "input": "115\n",
              "expectedOutput": "YES (1+1+5 = 7)\n"
          }
        ],
        "hints": [
          "Calculate the sum of the digits of the input number.",
          "Check if the sum is a prime number.",
          "If the sum is prime, output \"YES\". Otherwise, output \"NO\"."
        ],
        "tags": ["Math", "Prime Number"]
      },
      {
        "problemId": 13,
        "courseId": "Accenture",
        "title": "Large Small Sum",
        "difficulty": "Medium",
        "description": "You are required to implement the following Function\n\ndef LargeSmallSum(arr)\n\nThe function accepts an integers arr of size ’length’ as its arguments you are required to return the sum of second largest element from the even positions and second smallest from the odd position of given ‘arr’\n\nAssumption:\nAll array elements are unique\nTreat the 0th position as even\n\nNOTE\nReturn 0 if array is empty\nReturn 0, if array length is 3 or less than 3",
        "examples": [
          {
            "input": "arr: 3 2 1 7 5 4\n",
            "output": "7\n",
            "explanation": "Second largest among even position elements(1 3 5) is 3\nSecond smallest among odd position element is 4\nThus output is 3+4 = 7"
          },
          {
            "input": "arr: 1 8 0 2 3 5 6\n",
            "output": "8\n"
          }
        ],
        "constraints": [
          "0 <= length of arr <= 100",
          "All array elements are unique.",
          "-1000 <= arr[i] <= 1000"
        ],
        "testCases": [
          {
            "input": "arr: 3 2 1 7 5 4\n",
            "expectedOutput": "7\n"
          },
          {
            "input": "arr: 1 8 0 2 3 5 6\n",
            "expectedOutput": "8\n"
          },
          {
            "input": "arr: 1 2\n",
            "expectedOutput": "0\n"
          },
          {
            "input": "arr: 1\n",
            "expectedOutput": "0\n"
          },
          {
            "input": "arr: \n",
            "expectedOutput": "0\n"
          },
          {
            "input": "arr: 1 2 3 4\n",
            "expectedOutput": "3\n"
          },
          {
            "input": "arr: 5 1 2 3 4\n",
            "expectedOutput": "4\n"
          }
        ],
        "hints": [
          "Check if the array is empty or has a length less than or equal to 3. If so, return 0.",
          "Create two lists: one for even-positioned elements and one for odd-positioned elements.",
          "Populate the lists with the corresponding elements from the input array.",
          "Sort the even-positioned list in descending order and the odd-positioned list in ascending order.",
          "If either list has less than 2 elements, return 0.",
          "Return the sum of the second largest element from the even-positioned list and the second smallest element from the odd-positioned list."
        ],
        "tags": ["Array", "Sorting", "Simulation"]
      },
       {
        "problemId": 14,
        "courseId": "Accenture",
        "title": "Palindrome Linked List",
        "difficulty": "Medium",
        "description": "Given the head of a singly linked list, return true if it is a palindrome or false otherwise.",
        "examples": [
          {
            "input": "head = [1, 2, 2, 1]\n",
            "output": "true\n"
          },
          {
            "input": "head = [1, 2]\n",
            "output": "false\n"
          },
          {
            "input": "head = []\n",
            "output": "true\n"
          },
          {
            "input": "head = [1]\n",
            "output": "true\n"
          },
          {
            "input": "head = [1, 2, 3, 2, 1]\n",
            "output": "true\n"
          },
          {
            "input": "head = [1, 2, 3, 4, 5]\n",
            "output": "false\n"
          }
        ],
        "constraints": [
          "The number of nodes in the linked list is in the range [0, 10^5].",
          "0 <= Node.val <= 9"
        ],
        "testCases": [
          {
            "input": "head = [1, 2, 2, 1]\n",
            "expectedOutput": "true\n"
          },
          {
            "input": "head = [1, 2]\n",
            "expectedOutput": "false\n"
          },
          {
            "input": "head = []\n",
            "expectedOutput": "true\n"
          },
          {
            "input": "head = [1]\n",
            "expectedOutput": "true\n"
          },
          {
            "input": "head = [1, 2, 3, 2, 1]\n",
            "expectedOutput": "true\n"
          },
          {
            "input": "head = [1, 2, 3, 4, 5]\n",
            "expectedOutput": "false\n"
          }
        ],
        "hints": [
          "Convert the linked list to an array.",
          "Check if the array is a palindrome.",
          "Alternatively, you can use two pointers (slow and fast) to find the middle of the linked list, reverse the second half, and then compare the two halves."
        ],
        "tags": ["Linked List", "Two Pointers", "Stack", "Recursion"]
      },
      {
        "problemId": 15,
        "courseId": "Accenture",
        "title": "Longest Substring Without Repeating Characters",
        "difficulty": "Medium",
        "description": "Given a string s, find the length of the longest substring without repeating characters.",
        "examples": [
          {
            "input": "s = \"abcabcbb\"\n",
            "output": "3\n",
            "explanation": "The answer is \"abc\", with the length of 3."
          },
          {
            "input": "s = \"bbbbb\"\n",
            "output": "1\n",
            "explanation": "The answer is \"b\", with the length of 1."
          },
          {
            "input": "s = \"pwwkew\"\n",
            "output": "3\n",
            "explanation": "The answer is \"wke\", with the length of 3. Notice that the answer must be a substring, \"pwke\" is a subsequence and not a substring."
          },
          {
            "input": "s = \"\"\n",
            "output": "0\n"
          },
          {
            "input": "s = \"abc\"\n",
            "output": "3\n"
          },
          {
             "input": "s = \"dvdf\"\n",
             "output": "3\n"
          }
        ],
        "constraints": [
          "0 <= s.length <= 5 * 10^4",
          "s consists of English letters, digits, symbols and spaces."
        ],
        "testCases": [
          {
            "input": "s = \"abcabcbb\"\n",
            "expectedOutput": "3\n"
          },
          {
            "input": "s = \"bbbbb\"\n",
            "expectedOutput": "1\n"
          },
          {
            "input": "s = \"pwwkew\"\n",
            "expectedOutput": "3\n"
          },
          {
            "input": "s = \"\"\n",
            "expectedOutput": "0\n"
          },
          {
            "input": "s = \"abc\"\n",
            "expectedOutput": "3\n"
          },
          {
             "input": "s = \"dvdf\"\n",
             "expectedOutput": "3\n"
          }
        ],
        "hints": [
          "Use a sliding window approach.",
          "Maintain a set or hash map to keep track of the characters in the current window.",
          "Expand the window to the right until a repeating character is found.",
          "When a repeating character is found, shrink the window from the left until the repeating character is removed.",
          "Keep track of the maximum length of the window seen so far."
        ],
        "tags": ["String", "Hash Table", "Sliding Window"]
      },
       {
        "problemId": 16,
        "courseId": "Accenture",
        "title": "Count Magical Numbers",
        "difficulty": "Medium",
        "description": "Find count of magical numbers from 1 to N.\nA number is magical if:\nConvert to binary.\nReplace 0 with 1 and 1 with 2 in binary string.\nCalculate sum of all digits in binary string.\nResultant must be an odd number.\n\nEg:\nInput: N = 5\nOutput: 2",
        "examples": [
          {
            "input": "N = 5\n",
            "output": "2\n",
            "explanation": "1 -> Binary = 1 -> convert to = 2 sum = 2 (even)\n2 -> Binary = 10 -> convert to = 21 sum = 3 (odd)\n3 -> Binary = 11 -> convert to = 22 sum = 4 (even)\n4 -> Binary = 100 -> convert to = 211 sum = 4 (even)\n5 -> Binary = 101 -> convert to = 212 sum = 5 (odd)"
          },
          {
            "input": "N = 10\n",
            "output": "3\n"
          },
          {
            "input": "N = 1\n",
            "output": "0\n"
          },
          {
            "input": "N = 2\n",
            "output": "1\n"
          },
          {
            "input": "N = 3\n",
            "output": "1\n"
          },
          {
              "input": "N = 15\n",
              "output": "4\n"
          }
        ],
        "constraints": [
          "1 <= N <= 1000"
        ],
        "testCases": [
          {
            "input": "N = 5\n",
            "expectedOutput": "2\n"
          },
          {
            "input": "N = 10\n",
            "expectedOutput": "3\n"
          },
          {
            "input": "N = 1\n",
            "expectedOutput": "0\n"
          },
          {
            "input": "N = 2\n",
            "expectedOutput": "1\n"
          },
          {
            "input": "N = 3\n",
            "expectedOutput": "1\n"
          },
          {
              "input": "N = 15\n",
              "expectedOutput": "4\n"
          }
        ],
        "hints": [
          "Iterate from 1 to N.",
          "For each number, convert it to binary.",
          "Replace 0 with 1 and 1 with 2 in the binary string.",
          "Calculate the sum of the digits in the modified binary string.",
          "If the sum is odd, increment the count of magical numbers.",
          "Return the count of magical numbers."
        ],
        "tags": ["Math", "Bit Manipulation", "String", "Simulation"]
      },
      {
        "problemId": 17,
        "courseId": "Accenture",
        "title": "Matrix Even Odd Sum",
        "difficulty": "Medium",
        "description": "You are required to input the size of the matrix then the elements of matrix, then you have to divide the main matrix in two sub matrices (even and odd) in such a way that element at 0 index will be considered as even and element at 1st index will be considered as odd and so on. then you have sort the even and odd matrices in ascending order then print the sum of second largest number from both the matrices.",
        "examples": [
          {
            "input": "enter the size of array : 5\nenter element at 0 index : 3\nenter element at 1 index : 4\nenter element at 2 index : 1\nenter element at 3 index : 7\nenter element at 4 index : 9\n",
            "output": "7\n",
            "explanation": "Sorted even array : 1 3 9\nSorted odd array : 4 7"
          },
          {
            "input": "enter the size of array : 6\nenter element at 0 index : 1\nenter element at 1 index : 8\nenter element at 2 index : 0\nenter element at 3 index : 2\nenter element at 4 index : 3\nenter element at 5 index : 5\n",
            "output": "8\n",
            "explanation": "Sorted even array : 0 1 3\nSorted odd array : 2 5 8"
          },
          {
             "input": "enter the size of array : 2\nenter element at 0 index : 1\nenter element at 1 index : 2\n",
             "output": "0\n"
          },
          {
             "input": "enter the size of array : 1\nenter element at 0 index : 1\n",
             "output": "0\n"
          },
          {
              "input": "enter the size of array : 0\n",
              "output": "0\n"
          },
          {
              "input": "enter the size of array : 7\nenter element at 0 index : 5\nenter element at 1 index : 1\nenter element at 2 index : 2\nenter element at 3 index : 3\nenter element at 4 index : 4\nenter element at 5 index : 6\nenter element at 6 index : 7\n",
              "output": "6\n"
          }
        ],
        "constraints": [
          "0 <= size of array <= 100",
          "-1000 <= element at i index <= 1000"
        ],
        "testCases": [
          {
            "input": "enter the size of array : 5\nenter element at 0 index : 3\nenter element at 1 index : 4\nenter element at 2 index : 1\nenter element at 3 index : 7\nenter element at 4 index : 9\n",
            "expectedOutput": "7\n"
          },
          {
            "input": "enter the size of array : 6\nenter element at 0 index : 1\nenter element at 1 index : 8\nenter element at 2 index : 0\nenter element at 3 index : 2\nenter element at 4 index : 3\nenter element at 5 index : 5\n",
            "expectedOutput": "8\n"
          },
          {
             "input": "enter the size of array : 2\nenter element at 0 index : 1\nenter element at 1 index : 2\n",
             "expectedOutput": "0\n"
          },
          {
             "input": "enter the size of array : 1\nenter element at 0 index : 1\n",
             "expectedOutput": "0\n"
          },
          {
              "input": "enter the size of array : 0\n",
              "expectedOutput": "0\n"
          },
          {
              "input": "enter the size of array : 7\nenter element at 0 index : 5\nenter element at 1 index : 1\nenter element at 2 index : 2\nenter element at 3 index : 3\nenter element at 4 index : 4\nenter element at 5 index : 6\nenter element at 6 index : 7\n",
              "expectedOutput": "6\n"
          }
      
        ],
        "hints": [
          "Read the size of the array and the elements of the array.",
          "Create two lists: one for even-indexed elements and one for odd-indexed elements.",
          "Populate the lists with the corresponding elements from the input array.",
          "Sort both lists in ascending order.",
          "If either list has less than 2 elements, return 0.",
          "Return the sum of the second largest element from each list."
        ],
        "tags": ["Array", "Sorting", "Simulation"]
      },
       {
        "problemId": 18,
        "courseId": "Accenture",
        "title": "Max Exponents of 2",
        "difficulty": "Medium",
        "description": "You are given a function,\n\nInt MaxExponents (int a , int b);\n\nYou have to find and return the number between ‘a’ and ‘b’ (range inclusive on both ends) which has the maximum exponent of 2.\n\nThe algorithm to find the number with maximum exponent of 2 between the given range is\n\nLoop between ‘a’ and ‘b’. Let the looping variable be ‘i’.\nFind the exponent (power) of 2 for each ‘i’ and store the number with maximum exponent of 2 so far in a variable, let say ‘max’. Set ‘max’ to ‘i’ only if ‘i’ has more exponent of 2 than ‘max’.\nReturn ‘max’.\n\nAssumption: a < b\n\nNote: If two or more numbers in the range have the same exponents of 2, return the smallest number.",
        "examples": [
          {
            "input": "7\n12\n",
            "output": "8\n",
            "explanation": "Exponents of 2 in:\n7-0\n8-3\n9-0\n10-1\n11-0\n12-2\nHence maximum exponent if two is of 8."
          },
          {
            "input": "1\n5\n",
            "output": "4\n"
          },
          {
            "input": "16\n32\n",
            "output": "16\n"
          },
          {
            "input": "1\n1\n",
            "output": "1\n"
          },
          {
            "input": "5\n6\n",
            "output": "6\n"
          },
          {
            "input": "20\n24\n",
            "output": "24\n"
          }
        ],
        "constraints": [
          "1 <= a < b <= 1000"
        ],
        "testCases": [
          {
            "input": "7\n12\n",
            "expectedOutput": "8\n"
          },
          {
            "input": "1\n5\n",
            "expectedOutput": "4\n"
          },
          {
            "input": "16\n32\n",
            "expectedOutput": "16\n"
          },
          {
            "input": "1\n1\n",
            "expectedOutput": "1\n"
          },
          {
            "input": "5\n6\n",
            "expectedOutput": "6\n"
          },
          {
            "input": "20\n24\n",
            "expectedOutput": "24\n"
          }
        ],
        "hints": [
          "Iterate through the numbers from a to b (inclusive).",
          "For each number, find the highest power of 2 that divides it.",
          "Keep track of the number with the maximum exponent of 2 found so far.",
          "If two or more numbers have the same maximum exponent, choose the smallest number.",
          "Return the number with the maximum exponent of 2."
        ],
        "tags": ["Math", "Bit Manipulation", "Iteration"]
      },
      {
        "problemId": 19,
        "courseId": "Accenture",
        "title": "Maximum Favourite Songs",
        "difficulty": "Medium",
        "description": "Alice has a collection of songs represented as a string S where each character represents a song. A playlist is the substring of the given string with exactly K number of songs. She wants to create a playlist that contains maximum number of her favourite song which is 'a'. Your task is to find and return an integer value representing the maximum number of favourite songs that she can get in a single playlist.",
        "examples": [
          {
            "input": "S = \"acdbaaca\"\nK = 3\n",
            "output": "2\n",
            "explanation": "Substring of S of size 3: {\"acd\", \"cdb\", \"dba\", \"baa\", \"aac\", \"aca\"} \nSo \"a\" is coming max 2 times in substring"
          },
          {
            "input": "S = \"aaaaaa\"\nK = 3\n",
            "output": "3\n"
          },
          {
            "input": "S = \"bbbbbb\"\nK = 3\n",
            "output": "0\n"
          },
          {
            "input": "S = \"abcabcabc\"\nK = 3\n",
            "output": "1\n"
          },
          {
            "input": "S = \"a\"\nK = 1\n",
            "output": "1\n"
          },
           {
            "input": "S = \"aaaabbbbcccc\"\nK = 4\n",
            "output": "3\n"
          }
        ],
        "constraints": [
          "1 <= length of S <= 1000",
          "1 <= K <= length of S",
          "S consists of lowercase English letters."
        ],
        "testCases": [
          {
            "input": "S = \"acdbaaca\"\nK = 3\n",
            "expectedOutput": "2\n"
          },
          {
            "input": "S = \"aaaaaa\"\nK = 3\n",
            "expectedOutput": "3\n"
          },
          {
            "input": "S = \"bbbbbb\"\nK = 3\n",
            "expectedOutput": "0\n"
          },
          {
            "input": "S = \"abcabcabc\"\nK = 3\n",
            "expectedOutput": "1\n"
          },
          {
            "input": "S = \"a\"\nK = 1\n",
            "expectedOutput": "1\n"
          },
          {
            "input": "S = \"aaaabbbbcccc\"\nK = 4\n",
            "expectedOutput": "3\n"
          }
        ],
        "hints": [
          "Iterate through the string S and consider all substrings of length K.",
          "For each substring, count the occurrences of the character 'a'.",
          "Keep track of the maximum count of 'a' found so far.",
          "Return the maximum count."
        ],
        "tags": ["String", "Sliding Window", "Counting"]
      },
       {
        "problemId": 20,
        "courseId": "Accenture",
        "title": "Most Frequent Vowel",
        "difficulty": "Easy",
        "description": "You are given a string str of length n. You have to find the most frequent vowel in the string str.\nNote: You may assume that str will always have a unique most frequent vowel.",
        "examples": [
          {
            "input": "6\nxyuaab\n",
            "output": "a\n",
            "explanation": "As the vowel 'a' occurs the most in the string str, hence 'a' is printed in the output."
          },
          {
            "input": "5\naeiou\n",
            "output": "a\n"
          },
          {
            "input": "10\nprogramming\n",
            "output": "i\n"
          },
          {
            "input": "4\njava\n",
            "output": "a\n"
          },
          {
            "input": "7\nscience\n",
            "output": "e\n"
          },
          {
            "input": "8\nengineer\n",
            "output": "e\n"
          }
        ],
        "constraints": [
          "1 <= length of str <= 1000",
          "str consists of lowercase English letters."
        ],
        "testCases": [
          {
            "input": "6\nxyuaab\n",
            "expectedOutput": "a\n"
          },
          {
            "input": "5\naeiou\n",
            "expectedOutput": "a\n"
          },
          {
            "input": "10\nprogramming\n",
            "expectedOutput": "i\n"
          },
          {
            "input": "4\njava\n",
            "expectedOutput": "a\n"
          },
          {
            "input": "7\nscience\n",
            "expectedOutput": "e\n"
          },
          {
            "input": "8\nengineer\n",
            "expectedOutput": "e\n"
          }
        ],
        "hints": [
          "Iterate through the string and count the occurrences of each vowel.",
          "Use a hash map (dictionary) to store the counts of each vowel.",
          "Find the vowel with the maximum count.",
          "Return the vowel with the maximum count."
        ],
        "tags": ["String", "Hash Table", "Counting"]
      },
      {
        "problemId": 21,
        "courseId": "Accenture",
        "title": "Move Hyphens to Front",
        "difficulty": "Easy",
        "description": "Implement the following function:\n\nchar*MoveHyphen(char str[],int n);\n\nThe function accepts a string “str” of length ‘n’, that contains alphabets and hyphens (-). Implement the function to move all hyphens(-) in the string to the front of the given string.\n\nNOTE:- Return null if str is null.\n\nExample :-\n\nInput:\nstr.Move-Hyphens-to-Front\nOutput:\n---MoveHyphenstoFront\nExplanation:-\n\nThe string “Move-Hyphens -to-front” has 3 hyphens (-), which are moved to the front of the string, this output is “---MoveHyphen”\n\nSample Input\n\nStr: String-Compare\nSample Output-\n\n-StringCompare",
        "examples": [
          {
            "input": "str.Move-Hyphens-to-Front\n",
            "output": "---MoveHyphenstoFront\n"
          },
          {
            "input": "String-Compare\n",
            "output": "-StringCompare\n"
          },
          {
            "input": "NoHyphens\n",
            "output": "NoHyphens\n"
          },
          {
            "input": "-\n",
            "output": "-\n"
          },
          {
            "input": "-\n",
            "output": "-\n"
          },
          {
            "input": "-----\n",
            "output": "-----\n"
          }
        ],
        "constraints": [
          "1 <= length of str <= 1000",
          "str consists of alphabets and hyphens (-)."
        ],
        "testCases": [
          {
            "input": "str.Move-Hyphens-to-Front\n",
            "expectedOutput": "---MoveHyphenstoFront\n"
          },
          {
            "input": "String-Compare\n",
            "expectedOutput": "-StringCompare\n"
          },
          {
            "input": "NoHyphens\n",
            "expectedOutput": "NoHyphens\n"
          },
          {
            "input": "-\n",
            "expectedOutput": "-\n"
          },
          {
            "input": "-----\n",
            "expectedOutput": "-----\n"
          },
          {
            "input": "a-b-c-d\n",
            "expectedOutput": "----abcd\n"
          }
        ],
        "hints": [
          "Create a new string to store the result.",
          "Iterate through the input string and count the number of hyphens.",
          "Append the hyphens to the beginning of the result string.",
          "Iterate through the input string again and append the alphabets to the result string.",
          "Return the result string."
        ],
        "tags": ["String", "Simulation"]
      },
      {
        "problemId": 22,
        "courseId": "Accenture",
        "title": "Stock Price Negative Growth",
        "difficulty": "Easy",
        "description": "You are working on a financial analysing tool which represents daily stock price of a company over time. Each element in an integer array A of size N represents the closing price of the stock for that particular day. Your task is to find and return an integer value representing the total number of days where the stock market price decreased indicating negative growth.",
        "examples": [
          {
            "input": "N = 6, A[] = {2, 3, 1, 4, 5, 2}\n",
            "output": "2\n"
          },
          {
            "input": "N = 1, A[] = {6}\n",
            "output": "0\n"
          },
          {
            "input": "N = 5, A[] = {5, 4, 3, 2, 1}\n",
            "output": "4\n"
          },
          {
            "input": "N = 5, A[] = {1, 2, 3, 4, 5}\n",
            "output": "0\n"
          },
          {
            "input": "N = 3, A[] = {1, 1, 1}\n",
            "output": "0\n"
          },
          {
            "input": "N = 3, A[] = {3, 2, 3}\n",
            "output": "1\n"
          }
        ],
        "constraints": [
          "1 <= N <= 1000",
          "1 <= A[i] <= 10000"
        ],
        "testCases": [
          {
            "input": "N = 6, A[] = {2, 3, 1, 4, 5, 2}\n",
            "expectedOutput": "2\n"
          },
          {
            "input": "N = 1, A[] = {6}\n",
            "expectedOutput": "0\n"
          },
          {
            "input": "N = 5, A[] = {5, 4, 3, 2, 1}\n",
            "expectedOutput": "4\n"
          },
          {
            "input": "N = 5, A[] = {1, 2, 3, 4, 5}\n",
            "expectedOutput": "0\n"
          },
          {
            "input": "N = 3, A[] = {1, 1, 1}\n",
            "expectedOutput": "0\n"
          },
          {
            "input": "N = 3, A[] = {3, 2, 3}\n",
            "expectedOutput": "1\n"
          }
        ],
        "hints": [
          "Iterate through the array from the second element.",
          "For each element, compare it with the previous element.",
          "If the current element is less than the previous element, increment a counter.",
          "Return the counter."
        ],
        "tags": ["Array", "Simulation"]
      },
      {
        "problemId": 23,
        "courseId": "accenture",
        "title": "Rat and Food Houses",
        "difficulty": "Easy",
        "description": "Given the number of rats (r), food units per rat (unit), and an array of food amounts in houses, determine the minimum number of houses needed to provide sufficient food for all rats. Return -1 for null array, 0 if total food is insufficient, otherwise return the house count.",
        "examples": [
          {
            "input": "7\n2\n8\n[2,8,3,5,7,4,1,2]\n",
            "output": "4\n",
            "explanation": "Total food needed: 7*2=14. Food in first 4 houses: 2+8+3+5=18, which is sufficient.\n"
          }
        ],
        "constraints": [
          "1 <= r <= 1000",
          "1 <= unit <= 10",
          "1 <= n <= 100",
          "0 <= arr[i] <= 100",
          "All values are positive integers"
        ],
        "testCases": [
          {
            "input": "7\n2\n8\n[2,8,3,5,7,4,1,2]\n",
            "expectedOutput": "4\n"
          },
          {
            "input": "5\n3\n4\n[10,5,2,6]\n",
            "expectedOutput": "2\n",
            "isHidden": true,
            "explanation": "Food needed: 15. First 2 houses provide 15 (10+5).\n"
          },
          {
            "input": "10\n1\n5\n[1,1,1,1,1]\n",
            "expectedOutput": "0\n",
            "isHidden": true,
            "explanation": "Total food (5) < needed (10). Return 0.\n"
          },
          {
            "input": "3\n4\n0\n[]\n",
            "expectedOutput": "-1\n",
            "isHidden": true,
            "explanation": "Null array case returns -1.\n"
          },
          {
            "input": "1\n1\n1\n[1]\n",
            "expectedOutput": "1\n",
            "isHidden": true,
            "explanation": "Exact match case with single house.\n"
          }
        ],
        "hints": [
          "Calculate total food required as r * unit first",
          "Iterate through the array while accumulating food amounts",
          "Stop and return current house count when accumulated food >= required",
          "Handle edge cases: null array (-1) and insufficient food (0)",
          "Remember array indexing starts from 0 but house counting starts from 1"
        ],
        "tags": ["arrays", "simulation"]
      },
      {
  "problemId": 24,
  "courseId": "accenture",
  "title": "Count Elements with Absolute Difference",
  "difficulty": "Easy",
  "description": "Given an integer array 'arr', its length, and two integer variables 'num' and 'diff', find and return the number of elements of 'arr' having an absolute difference of less than or equal to 'diff' with 'num'. If no such element exists, return -1.",
  "examples": [
    {
      "input": "arr: [12, 3, 14, 56, 77, 13]\nnum: 13\ndiff: 2\n",
      "output": "3\n"
    },
    {
      "input": "arr: [1, 5, 10, 15]\nnum: 7\ndiff: 1\n",
      "output": "-1\n"
    },
    {
      "input": "arr: [10, 20, 30, 40, 50]\nnum: 35\ndiff: 5\n",
      "output": "2\n"
    }
  ],
  "constraints": [
    "1 <= length of arr <= 10^5",
    "-10^9 <= arr elements, num, diff <= 10^9"
  ],
  "testCases": [
    {
      "input": "arr: [12, 3, 14, 56, 77, 13]\nnum: 13\ndiff: 2\n",
      "expectedOutput": "3\n"
    },
    {
      "input": "arr: [1, 5, 10, 15]\nnum: 7\ndiff: 1\n",
      "expectedOutput": "-1\n"
    },
    {
      "input": "arr: [10, 20, 30, 40, 50]\nnum: 35\ndiff: 5\n",
      "expectedOutput": "2\n"
    },
    {
      "input": "arr: [1]\nnum: 1\ndiff: 0\n",
      "expectedOutput": "1\n"
    },
    {
      "input": "arr: [10, 15, 20]\nnum: 12\ndiff: 3\n",
      "expectedOutput": "2\n"
    },
    {
      "input": "arr: [-5, 0, 5, 10]\nnum: 0\ndiff: 5\n",
      "expectedOutput": "3\n"
    },
    {
      "input": "arr: [-10,-5,-1,0,5,10]\nnum: -3\ndiff: 2\n",
      "expectedOutput": "2\n"
    }
  ],
  "hints": [
    "Initialize a counter to 0.",
    "Iterate through the array 'arr'.",
    "For each element, calculate the absolute difference between the element and 'num'.",
    "If the absolute difference is less than or equal to 'diff', increment the counter.",
    "If the counter is 0 after iterating through the array, return -1. Otherwise, return the counter."
  ],
  "tags": ["Array Manipulation", "Absolute Difference", "Counting"]
},
{
  "problemId": 25,
  "courseId": "accenture",
  "title": "Difference of Sum",
  "difficulty": "Easy",
  "description": "Implement a function that accepts two integers n and m as arguments. Find the sum of all numbers in the range from 1 to m (inclusive) that are not divisible by n. Return the difference between the sum of integers not divisible by n and the sum of numbers divisible by n.",
  "examples": [
    {
      "input": "n: 4\nm: 20\n",
      "output": "90\n"
    },
    {
      "input": "n: 3\nm: 10\n",
      "output": "19\n"
    }
  ],
  "constraints": [
    "n > 0",
    "m > 0",
    "The sum lies within the integral range."
  ],
  "testCases": [
    {
      "input": "n: 4\nm: 20\n",
      "expectedOutput": "90\n"
    },
    {
      "input": "n: 3\nm: 10\n",
      "expectedOutput": "19\n"
    },
    {
      "input": "n: 2\nm: 10\n",
      "expectedOutput": "25\n"
    },
    {
      "input": "n: 5\nm: 15\n",
      "expectedOutput": "60\n"
    },
    {
      "input": "n: 1\nm: 5\n",
      "expectedOutput": "-15\n"
    },
    {
      "input": "n: 10\nm: 20\n",
      "expectedOutput": "110\n"
    },
    {
      "input": "n: 7\nm: 14\n",
      "expectedOutput": "42\n"
    }
  ],
  "hints": [
    "Initialize two variables, sum_divisible and sum_not_divisible, to 0.",
    "Iterate through the range from 1 to m (inclusive).",
    "For each number, check if it is divisible by n using the modulo operator (%).",
    "If the number is divisible by n, add it to sum_divisible.",
    "Otherwise, add it to sum_not_divisible.",
    "Return the difference between sum_not_divisible and sum_divisible."
  ],
  "tags": ["Sum", "Divisibility", "Basic Math"]
},
       {
        "problemId": 26,
        "courseId": "Accenture",
        "title": "Maximum Gap",
        "difficulty": "Medium",
        "description": "Given an integer array nums, return the maximum difference between two successive elements in its sorted form. If the array contains less than two elements return 0;",
        "examples": [
          {
            "input": "arr = [3, 6, 9, 1]\n",
            "output": "3\n"
          },
          {
            "input": "arr = [10]\n",
            "output": "0\n"
          },
          {
            "input": "arr = []\n",
            "output": "0\n"
          },
          {
            "input": "arr = [1, 2, 3, 4, 5]\n",
            "output": "1\n"
          },
          {
              "input": "arr = [5, 4, 3, 2, 1]\n",
              "output": "1\n"
          },
          {
              "input": "arr = [1, 1000000]\n",
              "output": "999999\n"
          }
        ],
        "constraints": [
          "0 <= nums.length <= 10^5",
          "0 <= nums[i] <= 10^9"
        ],
        "testCases": [
          {
            "input": "arr = [3, 6, 9, 1]\n",
            "expectedOutput": "3\n"
          },
          {
            "input": "arr = [10]\n",
            "expectedOutput": "0\n"
          },
          {
            "input": "arr = []\n",
            "expectedOutput": "0\n"
          },
          {
            "input": "arr = [1, 2, 3, 4, 5]\n",
            "expectedOutput": "1\n"
          },
          {
              "input": "arr = [5, 4, 3, 2, 1]\n",
              "expectedOutput": "1\n"
          },
          {
              "input": "arr = [1, 1000000]\n",
              "expectedOutput": "999999\n"
          }
        ],
        "hints": [
          "Sort the array.",
          "Iterate through the sorted array and find the maximum difference between successive elements.",
          "If the array has less than two elements, return 0."
        ],
        "tags": ["Array", "Sorting"]
      },
      {
        "problemId": 27,
        "courseId": "Accenture",
        "title": "Nth Fibonacci Number",
        "difficulty": "Easy",
        "description": "Given input as n, find nth fibonacci series number.\n\nFibonacci series example is: 0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55...",
        "examples": [
          {
            "input": "9\n",
            "output": "34\n",
            "explanation": "At 9th index number is 34"
          },
          {
            "input": "0\n",
            "output": "0\n"
          },
          {
            "input": "1\n",
            "output": "1\n"
          },
          {
            "input": "2\n",
            "output": "1\n"
          },
          {
            "input": "3\n",
            "output": "2\n"
          },
          {
            "input": "10\n",
            "output": "55\n"
          }
        ],
        "constraints": [
          "0 <= n <= 30"
        ],
        "testCases": [
          {
            "input": "9\n",
            "expectedOutput": "34\n"
          },
          {
            "input": "0\n",
            "expectedOutput": "0\n"
          },
          {
            "input": "1\n",
            "expectedOutput": "1\n"
          },
          {
            "input": "2\n",
            "expectedOutput": "1\n"
          },
          {
            "input": "3\n",
            "expectedOutput": "2\n"
          },
          {
            "input": "10\n",
            "expectedOutput": "55\n"
          }
        ],
        "hints": [
          "Use an iterative or recursive approach to calculate the nth Fibonacci number.",
          "For iterative approach, initialize the first two Fibonacci numbers as 0 and 1, and then calculate subsequent numbers by adding the previous two.",
          "For recursive approach, define the base cases as n=0 and n=1, and then recursively call the function for n-1 and n-2."
        ],
        "tags": ["Math", "Recursion", "Dynamic Programming"]
      },
      {
        "problemId": 28,
        "courseId": "Accenture",
        "title": "Table and Sum of Multiples",
        "difficulty": "Easy",
        "description": "Display the table of a number and print the sum of all the multiples in it.",
        "examples": [
          {
            "input": "5\n",
            "output": "5, 10, 15, 20, 25, 30, 35, 40, 45, 50\n275\n"
          },
          {
            "input": "12\n",
            "output": "12, 24, 36, 48, 60, 72, 84, 96, 108, 120\n660\n"
          },
          {
            "input": "1\n",
            "output": "1, 2, 3, 4, 5, 6, 7, 8, 9, 10\n55\n"
          },
          {
            "input": "10\n",
            "output": "10, 20, 30, 40, 50, 60, 70, 80, 90, 100\n550\n"
          },
          {
            "input": "0\n",
            "output": "0, 0, 0, 0, 0, 0, 0, 0, 0, 0\n0\n"
          },
          {
             "input": "2\n",
             "output": "2, 4, 6, 8, 10, 12, 14, 16, 18, 20\n110\n"
          }
        ],
        "constraints": [
          "0 <= input number <= 100"
        ],
        "testCases": [
          {
            "input": "5\n",
            "expectedOutput": "5, 10, 15, 20, 25, 30, 35, 40, 45, 50\n275\n"
          },
          {
            "input": "12\n",
            "expectedOutput": "12, 24, 36, 48, 60, 72, 84, 96, 108, 120\n660\n"
          },
          {
            "input": "1\n",
            "expectedOutput": "1, 2, 3, 4, 5, 6, 7, 8, 9, 10\n55\n"
          },
          {
            "input": "10\n",
            "expectedOutput": "10, 20, 30, 40, 50, 60, 70, 80, 90, 100\n550\n"
          },
          {
            "input": "0\n",
            "expectedOutput": "0, 0, 0, 0, 0, 0, 0, 0, 0, 0\n0\n"
          },
          {
             "input": "2\n",
             "expectedOutput": "2, 4, 6, 8, 10, 12, 14, 16, 18, 20\n110\n"
          }
        ],
        "hints": [
          "Iterate from 1 to 10 and calculate the multiples of the input number.",
          "Print the multiples separated by commas.",
          "Calculate the sum of the multiples.",
          "Print the sum."
        ],
        "tags": ["Math", "Iteration"]
      },
      {
        "problemId": 29,
        "courseId": "Accenture",
        "title": "Sum of Binary Digits",
        "difficulty": "Easy",
        "description": "You are given an integer 'n'. Write a Python function to calculate and return the sum of the digits in 'n' after converting it to its binary representation.\n\nFor example, 15, which has a binary representation of 1111, should return 4.",
        "examples": [
          {
            "input": "15\n",
            "output": "4\n"
          },
          {
            "input": "0\n",
            "output": "0\n"
          },
          {
            "input": "1\n",
            "output": "1\n"
          },
          {
            "input": "2\n",
            "output": "1\n"
          },
          {
            "input": "3\n",
            "output": "2\n"
          },
          {
            "input": "10\n",
            "output": "2\n"
          }
        ],
        "constraints": [
          "0 <= n <= 100000"
        ],
        "testCases": [
          {
            "input": "15\n",
            "expectedOutput": "4\n"
          },
          {
            "input": "0\n",
            "expectedOutput": "0\n"
          },
          {
            "input": "1\n",
            "expectedOutput": "1\n"
          },
          {
            "input": "2\n",
            "expectedOutput": "1\n"
          },
          {
            "input": "3\n",
            "expectedOutput": "2\n"
          },
          {
            "input": "10\n",
            "expectedOutput": "2\n"
          }
        ],
        "hints": [
          "Convert the integer to its binary representation using the bin() function.",
          "Remove the '0b' prefix from the binary string.",
          "Iterate through the binary string and sum the digits.",
          "Return the sum."
        ],
        "tags": ["Math", "Bit Manipulation", "String"]
      },
       {
        "problemId": 30,
        "courseId": "Accenture",
        "title": "Set Matrix Zeroes",
        "difficulty": "Medium",
        "description": "Given an m * n integer matrix, if an element is 0, set its entire row and column to 0.",
        "examples": [
          {
            "input": "matrix = [[1, 1, 1], [1, 0, 1], [1, 1, 1]]\n",
            "output": "matrix = [[1, 0, 1], [0, 0, 0], [1, 0, 1]]\n"
          },
          {
            "input": "matrix = [[0, 1, 2, 0], [3, 4, 5, 2], [1, 3, 1, 5]]\n",
            "output": "matrix = [[0, 0, 0, 0], [0, 4, 5, 0], [0, 3, 1, 0]]\n"
          },
          {
            "input": "matrix = [[1]]\n",
            "output": "matrix = [[1]]\n"
          },
          {
            "input": "matrix = [[0]]\n",
            "output": "matrix = [[0]]\n"
          },
          {
            "input": "matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n",
            "output": "matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n"
          },
          {
            "input": "matrix = [[1, 0]]\n",
            "output": "matrix = [[0, 0]]\n"
          }
        ],
        "constraints": [
          "m == matrix.length",
          "n == matrix[0].length",
          "1 <= m, n <= 200",
          "-2^31 <= matrix[i][j] <= 2^31 - 1"
        ],
        "testCases": [
          {
            "input": "matrix = [[1, 1, 1], [1, 0, 1], [1, 1, 1]]\n",
            "expectedOutput": "matrix = [[1, 0, 1], [0, 0, 0], [1, 0, 1]]\n"
          },
          {
            "input": "matrix = [[0, 1, 2, 0], [3, 4, 5, 2], [1, 3, 1, 5]]\n",
            "expectedOutput": "matrix = [[0, 0, 0, 0], [0, 4, 5, 0], [0, 3, 1, 0]]\n"
          },
          {
            "input": "matrix = [[1]]\n",
            "expectedOutput": "matrix = [[1]]\n"
          },
          {
            "input": "matrix = [[0]]\n",
            "expectedOutput": "matrix = [[0]]\n"
          },
          {
            "input": "matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n",
            "expectedOutput": "matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n"
          },
          {
            "input": "matrix = [[1, 0]]\n",
            "expectedOutput": "matrix = [[0, 0]]\n"
          }
        ],
        "hints": [
          "Use two sets to store the rows and columns that need to be set to zero.",
          "Iterate through the matrix and add the row and column indices to the sets if an element is 0.",
          "Iterate through the matrix again and set the elements to 0 if their row or column index is in the sets."
        ],
        "tags": ["Array", "Hash Table", "Matrix"]
      }
]